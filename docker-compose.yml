version: '3.8'
services:
  postgres-1:
    image: postgres:latest
    container_name: e-pg
    environment:
      POSTGRES_USER: ecloud
      POSTGRES_PASSWORD: abcd1234ABCD
      POSTGRES_DB: enode
    ports:
      - "15432:5432"
    volumes:
      - ./scripts/data/pg:/var/lib/postgresql/data
      - ./scripts/pg.sql:/docker-entrypoint-initdb.d/pg.sql
    restart: on-failure
  mysql-1:
    image: mysql:latest
    container_name: e-mysql
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: abcd1234ABCD
      MYSQL_USER: ecloud
      MYSQL_PASSWORD: abcd1234ABCD
      MYSQL_DATABASE: enode
    volumes:
      - ./scripts/data/mysql:/var/lib/mysql
      - ./scripts/mysql.sql:/docker-entrypoint-initdb.d/mysql.sql
    restart: on-failure

  mongodb-1:
    image: mongo:latest
    container_name: e-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: abcd1234ABCD
      MONGO_INITDB_DATABASE: enode
    ports:
      - "27017:27017"
    volumes:
      - ./scripts/data/mongo:/data/db
      - ./scripts/mongo.js:/docker-entrypoint-initdb.d/mongo.js
    restart: on-failure

  mongo-express-1:
    image: mongo-express:latest
    container_name: e-mongo-express
    depends_on:
      - mongodb-1
    ports:
      - "18081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: abcd1234ABCD
      ME_CONFIG_MONGODB_URL: mongodb://root:abcd1234ABCD@mongodb-1:27017/
    restart: on-failure

  # kafka stack
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: e-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22182:2182"
    restart: on-failure

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: e-kafka
    depends_on:
      - zookeeper-1
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2182
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: on-failure

  # rocketmq nameserver
  namesrv-1:
    image: apache/rocketmq:5.1.1
    container_name: e-rmqnamesrv
    ports:
      - "9876:9876"
    volumes:
      - ./scripts/data/rmq/namesrv/logs:/home/rocketmq/logs
    command: sh mqnamesrv
    restart: on-failure

  # rocketmq broker
  broker-1:
    image: apache/rocketmq:5.1.1
    container_name: e-rmqbroker
    links:
      - namesrv-1
    ports:
      - "10909:10909"
      - "10911:10911"
      - "10912:10912"
    environment:
      - NAMESRV_ADDR=namesrv:9876
    volumes:
      - ./scripts/data/rmq/broker/logs:/home/rocketmq/logs
      - ./scripts/data/rmq/broker/store:/home/rocketmq/store
      - ./scripts/conf/broker.conf:/opt/rocketmq-5.1.1/conf/broker.conf
    command: sh mqbroker -c /opt/rocketmq-5.1.1/conf/broker.conf
    restart: on-failure


  # rabbitmq server
  rabbitmq-1:
    image: rabbitmq:management
    container_name: e-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: on-failure

  # pulsar server
  pulsar-1:
    image: apachepulsar/pulsar:latest
    container_name: e-pulsar
    ports:
      - "6650:6650"
      - "18080:8080"
    volumes:
      - ./scripts/data/pulsar:/pulsar/data
    command: bin/pulsar standalone
    restart: on-failure

  # redis server
  redis-1:
    container_name: e-redis
    image: "redis/redis-stack:latest"
    ports:
      - "6379:6379"
      - "8001:8001"
    restart: on-failure
    deploy:
      replicas: 1

  portainer-1:
    container_name: e-portainer
    image: portainer/portainer-ce:latest
    ports:
      - "29443:9443"
      - "28000:8000"
      - "29000:9000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

volumes:
  portainer_data:

networks:
  default:
    driver: bridge
